{"code":"const roles = {\n    harvester: (data) => ({\n        prepare: creep => {\n            if (!data.sourceId) {\n                console.log(\"HarvesterConfig.sourceId is undefined\");\n                return false;\n            }\n            let source;\n            if (creep.memory.data.sourceId)\n                source = Game.getObjectById(creep.memory.data.sourceId);\n            else\n                source = Game.getObjectById(data.sourceId);\n            if (source && creep.harvest(source) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(source);\n                return false;\n            }\n            //arrive at source\n            return true;\n        },\n        source: creep => {\n            if (!data.sourceId) {\n                console.log(\"HarvesterConfig.sourceId is undefined\");\n                return false;\n            }\n            let source;\n            source = Game.getObjectById(data.sourceId);\n            if (!source) {\n                console.log(\"HarvesterConfig.sourceId is undefined\");\n                return false;\n            }\n            if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(source);\n                return false;\n            }\n            if (creep.store.getFreeCapacity() > 0)\n                return false;\n            //Harvest complete and start to go to targetContainer\n            return true;\n        },\n        target: creep => {\n            //For now, let assume target is the closest container/spawn\n            let target;\n            if (creep.memory.data.targetId) {\n                target = Game.getObjectById(creep.memory.data.targetId);\n                //if target is full, get another container\n                if ((target === null || target === void 0 ? void 0 : target.store.getFreeCapacity()) == 0) {\n                    //get another container that is not full\n                    target = creep.pos.findClosestByPath(FIND_STRUCTURES, {\n                        filter: (structure) => {\n                            return (structure.structureType == STRUCTURE_CONTAINER || structure.structureType == STRUCTURE_STORAGE || structure.structureType == STRUCTURE_SPAWN) &&\n                                structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\n                        }\n                    });\n                    creep.memory.data.targetId = target === null || target === void 0 ? void 0 : target.id;\n                }\n            }\n            else {\n                //get closest container\n                target = creep.pos.findClosestByPath(FIND_STRUCTURES, {\n                    filter: (structure) => {\n                        return (structure.structureType == STRUCTURE_CONTAINER || structure.structureType == STRUCTURE_STORAGE || structure.structureType == STRUCTURE_SPAWN) &&\n                            structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\n                    }\n                });\n                creep.memory.data.targetId = target === null || target === void 0 ? void 0 : target.id;\n            }\n            if (!target) {\n                console.log(\"HarvesterConfig.targetId is undefined\");\n                //All structures are full, direclty continue to the next stage\n                return true;\n            }\n            if (creep.transfer(target, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(target);\n                return false;\n            }\n            //arrive at target\n            return true;\n        },\n    }),\n    upgrader: (data) => ({\n        prepare: creep => {\n            return true;\n        },\n        source: creep => {\n            //get closest container\n            let source;\n            //if (creep.memory.data.sourceId) source = Game.getObjectById<StructureContainer>(creep.memory.data.sourceId)\n            source = creep.pos.findClosestByPath(FIND_STRUCTURES, {\n                filter: (structure) => {\n                    return (structure.structureType == STRUCTURE_CONTAINER || structure.structureType == STRUCTURE_STORAGE || structure.structureType == STRUCTURE_SPAWN) &&\n                        structure.store.getUsedCapacity(RESOURCE_ENERGY) > 0;\n                }\n            });\n            if (!source) {\n                console.log(\"UpgraderConfig.sourceId is undefined\");\n                return false;\n            }\n            if (creep.withdraw(source, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(source);\n            }\n            return true;\n        },\n        target: creep => {\n            //get controller\n            let target;\n            //if (creep.memory.data.targetId) target = Game.getObjectById<StructureController>(creep.memory.data.targetId)\n            target = creep.room.controller;\n            if (!target) {\n                console.log(\"UpgraderConfig.targetId is undefined\");\n                return false;\n            }\n            if (creep.upgradeController(target) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(target);\n            }\n            if (creep.store.getFreeCapacity() > 0)\n                return false;\n            //\n            return true;\n        },\n    }),\n    builder: (data) => ({\n        prepare: creep => {\n            return true;\n        },\n        source: creep => {\n            //get closest container\n            let source;\n            //if (creep.memory.data.sourceId) source = Game.getObjectById<StructureContainer>(creep.memory.data.sourceId)\n            source = creep.pos.findClosestByPath(FIND_STRUCTURES, {\n                filter: (structure) => {\n                    return (structure.structureType == STRUCTURE_CONTAINER || structure.structureType == STRUCTURE_STORAGE || structure.structureType == STRUCTURE_SPAWN) &&\n                        structure.store.getUsedCapacity(RESOURCE_ENERGY) > 0;\n                }\n            });\n            if (!source) {\n                console.log(\"BuilderConfig.sourceId is undefined\");\n                return false;\n            }\n            if (creep.withdraw(source, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(source);\n            }\n            return true;\n        },\n        target: creep => {\n            //get cloest construction site\n            let target;\n            if (creep.memory.data.targetId)\n                target = Game.getObjectById(creep.memory.data.targetId);\n            target = creep.pos.findClosestByPath(FIND_MY_CONSTRUCTION_SITES);\n            if (!target) {\n                console.log(\"BuilderConfig.targetId is undefined\");\n                return false;\n            }\n            if (creep.build(target) == ERR_NOT_IN_RANGE) {\n                creep.moveTo(target);\n            }\n            return true;\n        },\n    }),\n    claimer: (data) => ({\n        prepare: creep => {\n            return true;\n        },\n        source: creep => {\n            return true;\n        },\n        target: creep => {\n            return true;\n        },\n    }),\n    soldier: (data) => ({\n        prepare: creep => {\n            return true;\n        },\n        source: creep => {\n            return true;\n        },\n        target: creep => {\n            return true;\n        },\n    }),\n};\nexport default roles;\n//# sourceMappingURL=base.js.map","references":[],"map":"{\"version\":3,\"file\":\"base.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/role/base.ts\"],\"names\":[],\"mappings\":\"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\"}"}
